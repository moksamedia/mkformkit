'use strict';exports.__esModule=true;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _react=require('react');var _react2=_interopRequireDefault(_react);var _lodash=require('lodash');var _lodash2=_interopRequireDefault(_lodash);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}/**
 * Created by cantgetnosleep on 10/13/16.
 */var formStateKeys=["value","required"];var formPropKeys=["default","validate","inputTransformer","postChangeHook"];var validFormDescriptionKeys=formStateKeys+formPropKeys;/**
 *
 * Takes the formDescription and normalizes the initial state, setting the values to the
 * default values, and setting any unset default values to null.
 *
 * Also wraps the handleSubmit call to strip out the metadata and call the handleSubmit
 * prop callback with only the actual values to submit.
 *
 * @param props
 * @returns {{}}
 * @constructor
 */var FormManager=function(_Component){_inherits(FormManager,_Component);function FormManager(){_classCallCheck(this,FormManager);return _possibleConstructorReturn(this,_Component.apply(this,arguments));}FormManager.prototype.render=function render(){var props=this.props;var formDescription=props.formDescription,formValues=props.formValues,otherState=props.otherState;// Build the initial form state from the formDescription
var formState=_lodash2.default.mapValues(formDescription,function(obj,key){return _lodash2.default.mapValues(obj,function(attributeValue,attributeName){// handle form state keys
if(attributeName=="value"){return formValues&&formValues[key]?formValues[key]:obj.default;}else if(attributeName=="required"){return obj.required?true:false;}// throw error if key is not one of the prop keys
else if(!formPropKeys.includes(attributeName)){throw new Error("Unrecognized attribute: "+attributeName+", in form description: "+key+". Use otherState for non-standard state values.");}});});// Build form props (right now only default value)
var formProps=_lodash2.default.mapValues(formDescription,function(obj){return{default:obj.default!==undefined?obj.default:null,validate:obj.validate!==undefined?obj.validate:null,inputTransformer:obj.inputTransformer!==undefined?obj.inputTransformer:null,postChangeHook:obj.postChangeHook!==undefined?obj.postChangeHook:null};});// Handle submit iterates through form state and extracts the
// values as results
var handleSubmit=function handleSubmit(e){e.preventDefault();var results={};_lodash2.default.forIn(props.formState,function(value,key){results[key]=value.value;});props.handleSubmit(results);};// Should be only one child!
if(Array.isArray(props.children)){throw new Error("FormManager should only have one child element!");}return _react2.default.cloneElement(props.children,{formState:formState,formProps:formProps,otherState:otherState,handleSubmit:handleSubmit});};return FormManager;}(_react.Component);;FormManager.propTypes={formDescription:_react2.default.PropTypes.object.isRequired,formValues:_react2.default.PropTypes.object,otherState:_react2.default.PropTypes.object};/**
 * Handles validation logic. Injects the validationState and validationMessage into the
 * formValidation prop, and holds validation state.
 */var FormValidator=function(_Component2){_inherits(FormValidator,_Component2);function FormValidator(props){_classCallCheck(this,FormValidator);var _this2=_possibleConstructorReturn(this,_Component2.call(this,props));var validatedFormState=_lodash2.default.mapValues(_this2.props.formState,function(obj){return{validationState:null,validationMessage:null};});_this2.validationFunctions=_lodash2.default.mapValues(_this2.props.formProps,function(obj){return obj.validate;});_this2.state={validation:validatedFormState};return _this2;}FormValidator.prototype.validate=function validate(path,value){var validationFunctions=this.validationFunctions;if(value&&typeof validationFunctions[path]==='function'){return validationFunctions[path](value);}else{return{state:null,message:null};}};FormValidator.prototype.setValidationStateAndMessageForPath=function setValidationStateAndMessageForPath(path,state,message){var newState=_lodash2.default.extend({},this.state.validation);_lodash2.default.set(newState,path+'.validationState',state);_lodash2.default.set(newState,path+'.validationMessage',message);this.setState({validation:newState});};FormValidator.prototype.validateChange=function validateChange(path,value){var validationResult=this.validate(path,value);this.setValidationStateAndMessageForPath(path,validationResult.state,validationResult.message);};FormValidator.prototype.getValidateChange=function getValidateChange(path){var _this3=this;var _path=path;return function(e){_this3.handleChange(_path,e);};};FormValidator.prototype.handleSubmit=function handleSubmit(e){e.preventDefault;_lodash2.default.forIn(this.props.formState,function(value,key){console.log(key+": "+JSON.stringify(value));});};FormValidator.prototype.render=function render(){console.log("Render FormValidator");var childProps={validateChange:this.validateChange.bind(this),formState:this.props.formState,otherState:this.props.otherState,formProps:this.props.formProps,formValidation:this.state.validation,handleSubmit:this.props.handleSubmit};// Should be only one child!
if(Array.isArray(this.props.children)){throw new Error("FormValidator should only have one child element!");}return _react2.default.cloneElement(this.props.children,childProps);};return FormValidator;}(_react.Component);/**
 * Manages the actual form state. Maps all of the validation information, meta info such
 * as "required", and state values into the format expected by the form elements.
 */var FormStateHandler=function(_Component3){_inherits(FormStateHandler,_Component3);function FormStateHandler(props){_classCallCheck(this,FormStateHandler);var _this4=_possibleConstructorReturn(this,_Component3.call(this,props));_this4.state={formState:_this4.props.formState,otherState:_this4.props.otherState};return _this4;}FormStateHandler.prototype.handleChange=function handleChange(path,e){var _this5=this;var value=void 0;var inputTransformer=this.props.formProps[path].inputTransformer;var postChangeHook=this.props.formProps[path].postChangeHook;// handle case where event object has been sent
if(_lodash2.default.has(e,'target.value')){value=inputTransformer?inputTransformer(e):e.target.value;}// otherwise assume "e" is the actual value
else{value=inputTransformer?inputTransformer(e):e;}// call validate
if(this.props.validateChange){this.props.validateChange(path,value);}// create the new state
var newState=_lodash2.default.extend({},this.state);_lodash2.default.set(newState,'formState.'+path+'.value',value);// get the post change hook chance
if(postChangeHook){var set=function(path,value){if(_lodash2.default.has(_this5.state.formState,path)){_lodash2.default.set(newState,'formState.'+path,value);}else{_lodash2.default.set(newState,'otherState.'+path,value);}}.bind(this);postChangeHook(value,set,newState);}// set the new state
this.setState(newState);};FormStateHandler.prototype.getHandleChange=function getHandleChange(path){var _this6=this;var _path=path;return function(e){_this6.handleChange(_path,e);};};FormStateHandler.prototype.render=function render(){var _this7=this;var childProps={};_lodash2.default.forIn(this.state.formState,function(value,key){childProps[key]=_extends({},value,{// value and required
handleChange:_this7.getHandleChange.call(_this7,key)},_this7.props.formValidation[key]);});_lodash2.default.merge(this.props.formState,this.props.otherState);childProps.handleSubmit=this.props.handleSubmit;console.log(childProps);return _react2.default.cloneElement(this.props.children,_extends({},childProps));};return FormStateHandler;}(_react.Component);var MKForm=function(_Component4){_inherits(MKForm,_Component4);function MKForm(){_classCallCheck(this,MKForm);return _possibleConstructorReturn(this,_Component4.apply(this,arguments));}MKForm.prototype.render=function render(){return _react2.default.createElement(FormManager,{formDescription:this.props.formDescription,otherState:this.props.otherState,handleSubmit:this.props.handleSubmit},_react2.default.createElement(FormValidator,null,_react2.default.createElement(FormStateHandler,null,this.props.children)));};return MKForm;}(_react.Component);;MKForm.propTypes={formDescription:_react2.default.PropTypes.object.isRequired,otherState:_react2.default.PropTypes.object,handleSubmit:_react2.default.PropTypes.func.isRequired};MKForm.defaultProps={otherState:{}};exports.default=MKForm;